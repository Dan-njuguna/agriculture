name: "Agripredict Test"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  api-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Setup DVC
        uses: iterative/setup-dvc@v1
        with:
          version: '3.59.2'

      # - name: Setup CML
      #   uses: iterative/setup-cml@v1

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run DVC pipeline
        run: |
          dvc repro

      - name: Run API tests
        run: |
          uvicorn main:app &
          API_PID=$!
          sleep 30
          kill $API_PID
          wait $API_PID || true

  docker-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1

      - name: Build and Start Docker Compose services
        run: |
          docker compose up -d --build

      - name: Debug API Container Logs
        run: docker compose logs api

      - name: Wait for API to be ready
        run: |
          echo "Waiting for the API to start on localhost:65535..."
          MAX_RETRIES=30
          RETRY_INTERVAL=5

          for i in $(seq 1 $MAX_RETRIES); do
            if curl -v http://127.0.0.1:65535/health 2>&1 | grep -q 'HTTP/2 200' && curl -s http://127.0.0.1:65535/health | grep -q '{"status":"ok"'; then
              echo "API is ready after $((i * RETRY_INTERVAL)) seconds!"
              exit 0
            fi
            echo "API not ready yet. Retrying in $RETRY_INTERVAL seconds..."
            sleep $RETRY_INTERVAL
          done

          echo "API did not start within the given time. Please review 'Debug API Container Logs' step output for errors."
          exit 1

      - name: Stop and Remove Docker Containers
        if: always()
        run: docker compose down